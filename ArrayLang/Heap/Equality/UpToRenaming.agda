{-# OPTIONS --hidden-argument-puns #-}
open import Graded.Modality
import Graded.Modality.Properties.Subtraction as Subtraction
open import Tools.PropositionalEquality

module ArrayLang.Heap.Equality.UpToRenaming
  {โ} {M : Set โ}
  (๐ : Modality M)
  (open Modality ๐)
  (open Subtraction semiring-with-meet)
  (๐-๐โก๐ : ๐ - ๐ โก ๐)
  (๐โข๐ : ๐ โข ๐)
  where

open import Agda.Primitive

open import ArrayLang.Syntax ๐
open import ArrayLang.Usage ๐
open import ArrayLang.Heap ๐
open import ArrayLang.Heap.Properties ๐

open import Tools.Empty
open import Tools.Unit
open import Tools.Nat hiding (_โค_)
open import Tools.Fin
open import Tools.Product
open import Tools.Sum using (_โ_; injโ; injโ)
open import Tools.Relation
open import Tools.Function
open import Tools.Reasoning.PropositionalEquality

open import Function.Base using (_$_; _$โฒ_; _โ_)
open import Data.Product using (ฮฃ-syntax; โ)

private
  variable
    p q r : M
    n m k : Nat
    ฮ ฮโฒ ฮ ฮโฒ : Con _
    A B C : Type
    ๐ ๐ ๐ : ConItem _
    ฯ ฯ E Eโฒ Eโ Eโโฒ Eโ Eโโฒ : Ren _ _
    t tโฒ u uโฒ tโ tโโฒ tโ tโโฒ tโ tโโฒ : _ โข _
    x y : _ โแถ _
    -- v vโฒ vโ vโโฒ vโ vโโฒ vโ vโโฒ : _ โขแตฅ _
    H Hโฒ Hโณ : Heap _
    o oโฒ : HeapObject _ _

------------------------------------------------------------------------
-- Equality of terms via a weakening

-- We could make the renaming `Ren ฮ ฮ` a parameter instead of an index,
-- but this would require an additional syntax declaration.

infix 5 _~แต[_]_
data _~แต[_]_ {n m} {ฮ : Con n} {ฮ : Con m} : ฮ โข A โ Ren ฮ ฮ โ ฮ โข A โ Set โ where
  var : {ฯ : Ren ฮ ฮ}
        (x : ฮ โแถ ๐)
        {xโฒ : ฮ โแถ ๐}
      โ xโฒ โก renVar ฯ x
      โ ` xโฒ ~แต[ ฯ ] ` x

  lam : โ p
      โ t ~แต[ liftRen ฯ ]  tโฒ
      โ lam p t ~แต[ ฯ ] lam p tโฒ

  _โ_ : tโ      ~แต[ ฯ ] tโโฒ
      โ      tโ ~แต[ ฯ ]       tโโฒ
      โ tโ โ tโ ~แต[ ฯ ] tโโฒ โ tโโฒ

  zero : zero ~แต[ ฯ ] zero
  suc  :     t ~แต[ ฯ ] tโฒ
       โ suc t ~แต[ ฯ ] suc tโฒ

  star : star ~แต[ ฯ ] star
  letโ[_]_ :       tโ      ~แต[ ฯ ]       tโโฒ
           โ            tโ ~แต[ ฯ ]             tโโฒ
           โ letโ[ tโ ] tโ ~แต[ ฯ ] letโ[ tโโฒ ] tโโฒ

  !_ :   t ~แต[ ฯ ]   tโฒ
     โ ! t ~แต[ ฯ ] ! tโฒ
  let![_]_ :       tโ      ~แต[ ฯ ]       tโโฒ
           โ            tโ ~แต[ liftRen ฯ ]        tโโฒ
           โ let![ tโ ] tโ ~แต[ ฯ ] let![ tโโฒ ] tโโฒ

  โจ_,_โฉ :   tโ        ~แต[ ฯ ]   tโโฒ
        โ        tโ   ~แต[ ฯ ]         tโโฒ
        โ โจ tโ , tโ โฉ ~แต[ ฯ ] โจ tโโฒ , tโโฒ โฉ
  letโ[_]_ :      tโ       ~แต[ ฯ ]       tโโฒ
           โ            tโ ~แต[ liftRen (liftRen ฯ) ] tโโฒ
           โ letโ[ tโ ] tโ ~แต[ ฯ ] letโ[ tโโฒ ] tโโฒ

  linearly  :          t ~แต[ liftRen ฯ ]     tโฒ
            โ linearly t ~แต[ ฯ ] linearly tโฒ
  consume   :         t ~แต[ ฯ ]         tโฒ
            โ consume t ~แต[ ฯ ] consume tโฒ
  duplicate :           t ~แต[ ฯ ]           tโฒ
            โ duplicate t ~แต[ ฯ ] duplicate tโฒ

  new   :     tโ    ~แต[ ฯ ]     tโโฒ
        โ        tโ ~แต[ ฯ ]         tโโฒ
        โ new tโ tโ ~แต[ ฯ ] new tโโฒ tโโฒ

  read  :      tโ    ~แต[ ฯ ]      tโโฒ
        โ         tโ ~แต[ ฯ ]          tโโฒ
        โ read tโ tโ ~แต[ ฯ ] read tโโฒ tโโฒ

  write :       tโ       ~แต[ ฯ ]       tโโฒ
        โ          tโ    ~แต[ ฯ ]           tโโฒ
        โ             tโ ~แต[ ฯ ]               tโโฒ
        โ write tโ tโ tโ ~แต[ ฯ ] write tโโฒ tโโฒ tโโฒ

  free  :      t ~แต[ ฯ ]      tโฒ
        โ free t ~แต[ ฯ ] free tโฒ

~แตโโก : t ~แต[ ฯ ] tโฒ โ t โก ren ฯ tโฒ
~แตโโก (var xโฒ refl)    = refl
~แตโโก (lam p ~)        = cong (lam p) (~แตโโก ~)
~แตโโก (~โ โ ~โ)        = congโ _โ_ (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก zero             = refl
~แตโโก (suc ~)          = cong suc (~แตโโก ~)
~แตโโก star             = refl
~แตโโก (letโ[ ~โ ] ~โ)  = congโ letโ[_]_ (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (! ~)            = cong !_        (~แตโโก ~)
~แตโโก (let![ ~โ ] ~โ)  = congโ let![_]_ (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก โจ ~โ , ~โ โฉ      = congโ โจ_,_โฉ    (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (letโ[ ~โ ] ~โ)  = congโ letโ[_]_ (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (linearly ~)     = cong linearly  (~แตโโก ~)
~แตโโก (consume ~)      = cong consume   (~แตโโก ~)
~แตโโก (duplicate ~)    = cong duplicate (~แตโโก ~)
~แตโโก (new ~โ ~โ)      = congโ new      (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (read ~โ ~โ)     = congโ read     (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (write ~โ ~โ ~โ) = congโ write    (~แตโโก ~โ) (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (free ~)         = cong free      (~แตโโก ~)

~แต-refl : ren ฯ t ~แต[ ฯ ] t
~แต-refl {t = ` x}         = var x refl
~แต-refl {t = lam p _}     = lam p ~แต-refl
~แต-refl {t = _ โ _}       = ~แต-refl โ ~แต-refl
~แต-refl {t = zero}        = zero
~แต-refl {t = suc _}       = suc ~แต-refl
~แต-refl {t = star}        = star
~แต-refl {t = letโ[ _ ] _} = letโ[ ~แต-refl ] ~แต-refl
~แต-refl {t = ! _}         = ! ~แต-refl
~แต-refl {t = let![ _ ] _} = let![ ~แต-refl ] ~แต-refl
~แต-refl {t = โจ _ , _ โฉ}   = โจ ~แต-refl , ~แต-refl โฉ
~แต-refl {t = letโ[ _ ] _} = letโ[ ~แต-refl ] ~แต-refl
~แต-refl {t = linearly _}  = linearly ~แต-refl
~แต-refl {t = consume _}   = consume ~แต-refl
~แต-refl {t = duplicate _} = duplicate ~แต-refl
~แต-refl {t = new _ _}     = new ~แต-refl ~แต-refl
~แต-refl {t = read _ _}    = read ~แต-refl ~แต-refl
~แต-refl {t = write _ _ _} = write ~แต-refl ~แต-refl ~แต-refl
~แต-refl {t = free _}      = free ~แต-refl

โกโ~แต : t โก ren ฯ tโฒ โ t ~แต[ ฯ ] tโฒ
โกโ~แต refl = ~แต-refl

------------------------------------------------------------------------
-- Equality of values up to weakening

infix 5 _~แต[_]_
_~แต[_]_ : โ {n m} {ฮ : Con n} {ฮ : Con m}
        โ ฮ โขแตฅ A โ Ren ฮ ฮ
        โ ฮ โขแตฅ A โ Set โ
(t , v) ~แต[ ฯ ] (tโฒ , vโฒ) = t ~แต[ ฯ ] tโฒ

substValue : โ {n m}
             {ฮ : Con n} {ฮ : Con m}
             {ฯ : Ren ฮ ฮ}
             {t : ฮ โข A} {tโฒ : ฮ โข A}
           โ t ~แต[ ฯ ] tโฒ โ Value t โ Value tโฒ
substValue (var xโฒ refl) (ref x) = ref xโฒ
substValue (lam p ~)     (lam p t) = lam p _
substValue zero          zero = zero
substValue (suc ~)       (suc v) = suc (substValue ~ v)
substValue star          star  = star
substValue (! ~)         (! v) = ! substValue ~ v
substValue โจ ~โ , ~โ โฉ   โจ vโ , vโ โฉ = โจ substValue ~โ vโ , substValue ~โ vโ โฉ

-- substValue : {}
--              โฆ v โฆแต ~แต[ ฯ ] t
--            โ t โก โฆ vโฒ โฆแต
-- substValue {t = t} ~ = {!t ~ !}

private
  variable
    v vโฒ : _ โขแตฅ _

~แตโ~แต : โฆ v โฆแต ~แต[ ฯ ] โฆ vโฒ โฆแต โ v ~แต[ ฯ ] vโฒ
~แตโ~แต ~ = ~

open import Relation.Binary.PropositionalEquality using (cong-app)

~แตโโก : v ~แต[ ฯ ] vโฒ โ v โก renแต ฯ vโฒ
~แตโโก (var x refl) = {! cong-app _,_  !}
~แตโโก (lam p ~) = {!   !}
~แตโโก zero = {!   !}
~แตโโก (suc ~) = {!   !}
~แตโโก star = {!   !}
~แตโโก (! ~) = {!   !}
~แตโโก โจ ~ , ~โ โฉ = {!   !} -- refl

~แต-refl : renแต ฯ v ~แต[ ฯ ] v
~แต-refl {v = v , value-v} = {!   !}

โกโโผแต : v โก renแต ฯ vโฒ โ v ~แต[ ฯ ] vโฒ
โกโโผแต refl = {! ~แต-refl !}

------------------------------------------------------------------------
-- Elimator equality up to weakening

mutual
  _~แต[_]_ : Elim ฮ A B โ Ren ฮ ฮ โ Elim ฮ A B โ Set โ
  e ~แต[ ฯ ] eโฒ = _ โท e ~แต[ ฯ ] eโฒ

  infix 5 _โท_~แต[_]_
  data _โท_~แต[_]_ {ฮ : Con n} {ฮโฒ : Con m}
    : โ B
    โ Elim ฮ A B
    โ Ren ฮ ฮโฒ
    โ Elim ฮโฒ A B
    โ Set โ where
    -โโ_ : {u  : ฮ โข A} {uโฒ : ฮโฒ โข A}
         โ           ren E u   ~แต[ ฯ ]     ren Eโฒ uโฒ
         โ B โท (-โโจ p โฉโ u) E ~แต[ ฯ ] (-โโจ p โฉโ uโฒ) Eโฒ

    _โโ- : {v  : ฮ โขแตฅ A [ p ]โ B} {vโฒ : ฮโฒ โขแตฅ A [ p ]โ B}
         โ renแต E v            ~แต[ ฯ ]  renแต Eโฒ vโฒ
         โ B โท (v โโจ p โฉโ-) E ~แต[ ฯ ] (vโฒ โโจ p โฉโ-) Eโฒ

    sucโ : sucโ ~แต[ ฯ ] sucโ

    !-โ : ! B โท !-โ ~แต[ ฯ ] !-โ

    โจ-,_โฉโ : {u  : ฮ  โข B} {E  : Ren ฮ ฮ}
             {uโฒ : ฮโฒ โข B} {Eโฒ : Ren ฮโฒ ฮโฒ}
           โ            ren E u      ~แต[ ฯ ] ren Eโฒ uโฒ
           โ A โ _ โท โจ-, u โฉโ E ~แต[ ฯ ] โจ-, uโฒ โฉโ Eโฒ
    โจ_,-โฉโ : {v  : ฮ  โขแตฅ A} {Eโ  : Ren ฮ ฮ}
             {vโฒ : ฮโฒ โขแตฅ A} {Eโโฒ : Ren ฮโฒ ฮโฒ}
             {ฯ : Ren ฮ ฮโฒ}
           โ renแต E v            ~แต[ ฯ ] renแต Eโฒ vโฒ
           โ _ โ B โท โจ v ,-โฉโ E ~แต[ ฯ ] โจ vโฒ ,-โฉโ Eโฒ

    letโ[-]โ : {u  : ฮ  โข B} {E  : Ren ฮ ฮ}
               {uโฒ : ฮโฒ โข B} {Eโฒ : Ren ฮโฒ ฮโฒ}
             โ ren E u           ~แต[ ฯ ] ren Eโฒ uโฒ
             โ B โท letโ[-]โ u E ~แต[ ฯ ] letโ[-]โ uโฒ Eโฒ

    let![-]โ : {u  : ฮ  โ var A โข B} {E  : Ren ฮ ฮ}
               {uโฒ : ฮโฒ โ var A โข B} {Eโฒ : Ren ฮโฒ ฮโฒ}
             โ ren (liftRen E) u    ~แต[ liftRen ฯ ] ren (liftRen Eโฒ) uโฒ
             โ B โท let![-]โ u E ~แต[      ฯ ] let![-]โ uโฒ Eโฒ

    letโ[-]โ : {u  : ฮ  โ var A โ var B โข C} {E  : Ren ฮ ฮ}
               {uโฒ : ฮโฒ โ var A โ var B โข C} {Eโฒ : Ren ฮโฒ ฮโฒ}
             โ ren (liftRen (liftRen E)) u ~แต[ liftRen (liftRen ฯ) ] ren (liftRen (liftRen Eโฒ)) uโฒ
             โ C โท letโ[-]โ u E     ~แต[             ฯ ] letโ[-]โ uโฒ Eโฒ

    linearlyโ : {x : ฮ โแถ var Lin} {xโฒ : ฮโฒ โแถ var Lin}
              โ ! A โท linearlyโ (renVar ฯ xโฒ) ~แต[ ฯ ] linearlyโ xโฒ

    consumeโ : consumeโ ~แต[ ฯ ] consumeโ
    duplicateโ : duplicateโ ~แต[ ฯ ] duplicateโ

    newโโ : ren E tโ    ~แต[ ฯ ] ren Eโฒ tโโฒ
          โ newโโ tโ E ~แต[ ฯ ] newโโ tโโฒ Eโฒ
    newโโ : โ {s}
          โ newโโ s ~แต[ ฯ ] newโโ s

    readโโ : ren E t    ~แต[ ฯ ] ren Eโฒ tโฒ
           โ readโโ t E ~แต[ ฯ ] readโโ tโฒ Eโฒ
    readโโ : โ {i}
           โ readโโ i ~แต[ ฯ ] readโโ i

    writeโโ : ren E tโ         ~แต[ ฯ ] ren Eโฒ tโโฒ
            โ ren E tโ         ~แต[ ฯ ] ren Eโฒ tโโฒ
            โ writeโโ tโ tโ E ~แต[ ฯ ] writeโโ tโโฒ tโโฒ Eโฒ
    writeโโ : โ {v}
            โ ren E tโ         ~แต[ ฯ ] ren Eโฒ tโโฒ
            โ writeโโ tโ v E  ~แต[ ฯ ] writeโโ tโ v Eโฒ
    writeโโ : โ {i v}
            โ writeโโ i v ~แต[ ฯ ] writeโโ i v

    freeโ   : freeโ ~แต[ ฯ ] freeโ

private
  variable
    e eโฒ : Elim _ _ _

~แตโโก : e ~แต[ ฯ ] eโฒ
     โ e โก renแต ฯ eโฒ
~แตโโก {ฯ = ฯ} {eโฒ = -โโ_ _ Eโฒ} (-โโ_ {E = E} ~) = {! ฯ !}
~แตโโก (~ โโ-) = {!   !}
~แตโโก sucโ = refl
~แตโโก !-โ = refl
~แตโโก โจ-, x โฉโ = {!   !}
~แตโโก โจ x ,-โฉโ = {!   !}
~แตโโก (letโ[-]โ x) = {!   !}
~แตโโก (let![-]โ x) = {!   !}
~แตโโก (letโ[-]โ x) = {!   !}
~แตโโก linearlyโ = refl
~แตโโก consumeโ = refl
~แตโโก duplicateโ = refl
~แตโโก (newโโ x) = {!   !}
~แตโโก newโโ = refl
~แตโโก (readโโ x) = {!   !}
~แตโโก readโโ = refl
~แตโโก (writeโโ x xโ) = {!   !}
~แตโโก (writeโโ x) = {!   !}
~แตโโก writeโโ = refl
~แตโโก freeโ = refl

โกโ~แต : e โก renแต ฯ eโฒ
     โ e ~แต[ ฯ ] eโฒ
โกโ~แต = {!   !}

~แตโโฃโกโฃ : {ฯ : Ren ฮ ฮโฒ} {e : Elim ฮ A B} {eโฒ : Elim ฮโฒ A B}
       โ e ~แต[ ฯ ] eโฒ
       โ โฃ e โฃแต โก โฃ eโฒ โฃแต
~แตโโฃโกโฃ (-โโ ~)        = refl
~แตโโฃโกโฃ (~ โโ-)        = refl
~แตโโฃโกโฃ sucโ           = refl
~แตโโฃโกโฃ !-โ            = refl
~แตโโฃโกโฃ โจ-, ~ โฉโ       = refl
~แตโโฃโกโฃ โจ ~ ,-โฉโ       = refl
~แตโโฃโกโฃ (letโ[-]โ ~)   = refl
~แตโโฃโกโฃ (let![-]โ ~)   = refl
~แตโโฃโกโฃ (letโ[-]โ ~)   = refl
~แตโโฃโกโฃ linearlyโ      = refl
~แตโโฃโกโฃ consumeโ       = refl
~แตโโฃโกโฃ duplicateโ     = refl
~แตโโฃโกโฃ (newโโ ~)      = refl
~แตโโฃโกโฃ newโโ          = refl
~แตโโฃโกโฃ (readโโ ~)     = refl
~แตโโฃโกโฃ readโโ         = refl
~แตโโฃโกโฃ (writeโโ ~ ~โ) = refl
~แตโโฃโกโฃ (writeโโ ~)    = refl
~แตโโฃโกโฃ writeโโ        = refl
~แตโโฃโกโฃ freeโ          = refl

------------------------------------------------------------------------
-- Stack equality up to weakening

data _~S[_]_ {n m} {ฮ : Con n} {ฮ : Con m}
  : Stack ฮ A B
  โ Ren ฮ ฮ
  โ Stack ฮ A B
  โ Set โ where
  ฮต   : (Stack ฮ A A โ ฮต) ~S[ ฯ ] (Stack ฮ A A โ ฮต)
  _โ_ : {e  : Elim ฮ A B} {S  : Stack ฮ B C}
        {eโฒ : Elim ฮ A B} {Sโฒ : Stack ฮ B C}
      โ e     ~แต[ ฯ ] eโฒ
      โ     S ~S[ ฯ ]      Sโฒ
      โ e โ S ~S[ ฯ ] eโฒ โ Sโฒ

~Sโโก : {S : Stack ฮ A B} {Sโฒ : Stack ฮโฒ A B}
       {ฯ : Ren ฮ ฮโฒ}
     โ S ~S[ ฯ ] Sโฒ
     โ S โก renหข ฯ Sโฒ
~Sโโก = {!!}

โกโ~S : {S : Stack ฮ A B} {Sโฒ : Stack ฮโฒ A B}
       {ฯ : Ren ฮ ฮโฒ}
     โ S โก renหข ฯ Sโฒ
     โ S ~S[ ฯ ] Sโฒ
โกโ~S = {!!}

private
  variable
    S Sโฒ : Stack _ _ _

~Sโโฃโกโฃ : S ~S[ ฯ ] Sโฒ
       โ โฃ S โฃ โก โฃ Sโฒ โฃ
~Sโโฃโกโฃ ฮต = refl
~Sโโฃโกโฃ (e~e โ S~S) = congโ _ยท_ (~Sโโฃโกโฃ S~S) (~แตโโฃโกโฃ e~e)

------------------------------------------------------------------------
-- Heap object equality up to weakening

open import Data.Vec using (Vec; lookup; _[_]โ_; replicate)

private
  variable
    ฮโ ฮโ : Con _
    xs xsโฒ : Vec Nat _

data _~แต[_]_ : HeapObject ฮโ ๐ โ Ren ฮโ ฮโ โ HeapObject ฮโ ๐ โ Set โ where
  value : renแต E v     ~แต[ ฯ ] renแต Eโฒ vโฒ
        โ value v E   ~แต[ ฯ ] value vโฒ Eโฒ
  array : array xs    ~แต[ ฯ ] array xs
  lin   : lin         ~แต[ ฯ ] lin
  โฏ     : (HeapObject ฮ (var A) โ โฏ) ~แต[ ฯ ] โฏ

------------------------------------------------------------------------
-- Heap equality up to weakening

-- data _~สฐ[_]_ : Heap ฮโ โ Ren ฮโ ฮโ โ Heap ฮโ โ Set โ where
--   ~สฐ-nil  : โ {ฯ} โ ฮต ~สฐ[ ฯ ] ฮต

--   ~สฐ-cons : {Hโ : Heap ฮโ} {Hโ : Heap ฮโ} {ฯ : Ren ฮโ ฮโ}
--             {oโ : HeapObject ฮโ ๐} {oโ : HeapObject ฮโ ๐}
--           โ oโ โก renแต ฯ oโ
--           โ {ฯ : Ren (ฮโ โ ๐) (ฮโ โ ๐)}
--           โ ฯ โก liftRen ฯ
--           โ Hโ            ~สฐ[ ฯ ] Hโ
--           โ Hโ โ[ p ]โ oโ ~สฐ[ ฯ ] Hโ โ[ p ]โ oโ

--   ~สฐ-copy : {Hโ Hโโฒ : Heap ฮโ} {Hโ Hโโฒ : Heap ฮโ} {ฯ : Ren ฮโ ฮโ}
--             (x : ฮโ โแถ ref)
--             (lโ : Hโ โข renVar ฯ x โฆ[ ๐ - ๐ ] array xs โจพ Hโโฒ)
--             (lโ : Hโ โข x โ xsโฒ โจพ Hโโฒ)
--           โ {ฯ : Ren (ฮโ โ ref) ฮโ}
--           โ ฯ โก remapRen x ฯ
--           โ Hโ                    ~สฐ[ ฯ ] Hโ
--           โ Hโโฒ โ[ ๐ ]โ array xsโฒ ~สฐ[ ฯ ] Hโโฒ

-- infixl 15 _copy:_from:_with:_
-- pattern ฮตโ = ~สฐ-nil {ฯ = ฮต}
-- pattern _โโ ~ = ~สฐ-cons refl refl ~
-- pattern _copy:_from:_with:_ ~ x lโ lโ = ~สฐ-copy x lโ lโ refl ~

-- module _ where
--   open Data.Vec
--   _ : ฮต โ[ ๐ ]โ array (0 โท [])
--         โ[ ฯ ]โ value (_ , zero) ฮต
--         โ[ ๐ ]โ array (1 โท [])
--         โ[ ๐ ]โ array (2 โท [])

--       ~สฐ[ ฮต โ[ tt ] vz โ[ tt , tt ] vs vs vz ]

--       ฮต โ[ ๐ ]โ array (2 โท [])
--         โ[ ฯ ]โ value (_ , zero) ฮต
--   _ = ฮตโ โโ โโ
--       copy: vs vz
--       from: vs[] vz[] ๐-๐โก๐
--       with: vs vz
--       copy: vs vz
--       from: vz[] ๐-๐โก๐
--       with: vs vz

-- _ : ฮต โ[ ๐ ] array (1 โท [])       -- ----+
--       โ[ ๐ ] array (2 โท [])       -- --+ |
--       โ[ ฯ ] value (_ , zero) ?   --   | |
--       โ[ ๐ ] array (2 โท [])       -- <-+ |
--       โ[ ๐ ] array (1 โท [])       -- <---+

--       ~สฐ[ vs vs vz โท vs vz โท vz โท [] ]

--     ฮต โ[ ๐ ] array (1 โท [])
--       โ[ ๐ ] array (2 โท [])
--       โ[ ฯ ] value (_ , zero) ?
-- _ = ฮตโ โ โ โ
--     copy: vs vz             -- array (2 โท [])
--     from: vs vz ๐-๐โก๐
--     copy: vs vs vz          -- array (1 โท [])
--     from: vs vs vs vz ๐-๐โก๐

------------------------------------------------------------------------
-- Properties of heap equality

-- ~สฐ-refl : H ~สฐ[ idRen ] H
-- ~สฐ-refl {H = ฮต} = ฮตโ
-- ~สฐ-refl {H = H โ[ p ]โ o} = ~สฐ-cons (sym (renแต-id o)) refl (~สฐ-refl {H = H})

-- โข-~สฐ : H ~สฐ[ ฯ ] Hโฒ โ Hโฒ ~สฐ[ ฯ ] Hโณ
--      โ H ~สฐ[ ฯ โข ฯ ] Hโณ
-- โข-~สฐ {ฯ = ฮต} {ฯ = ฮต} ~ ~สฐ-nil = ~
-- โข-~สฐ ~โ (~โ โโ) = โข-~สฐ ~โ {!!}
-- โข-~สฐ ~โ (~สฐ-copy x lโ lโ xโ ~โ) = {!!}

โข-remap-id : {ฯ : Ren ฮ (ฮ โ ๐)}
           โ {x : ฮ โแถ ๐}
           โ ฯ โข remapRen x idRen โก {! remapRen ? x !}
           --             ^^^^^
           --            Ren ฮ ฮ
           --    ^^^^^^^^^^^^^^^^
           --      Ren (ฮ โ ๐) ฮ
           -- ^^^^^^^^^^^^^^^^^^^
           --      Ren ฮ ฮ
โข-remap-id {ฯ = ฯ} = {!!}

-- -- ~สฐ[]-trans : Hโ ~สฐ[ ฯ ] Hโ
-- --            โ Hโ ~สฐ[ ฯ ] Hโ
-- --            โ Hโ ~สฐ[ ฯ โข ฯ ] Hโ
-- -- ~สฐ[]-trans = {!!}

-- -- update-~สฐ[] : {ฯ : Ren ฮโ ฮโ}
-- --               {Hโ Hโโฒ : Heap ฮโ} {Hโ Hโโฒ : Heap ฮโ}
-- --               {x : ฮโ โแถ ๐}
-- --               {oโ : HeapObject ฮโ ๐} {oโ : HeapObject ฮโ ๐}
-- --             โ Hโ ~สฐ[ ฯ ] Hโ
-- --             โ Hโ โข renVar ฯ x โฆ[ q ] oโ โจพ Hโโฒ
-- --             โ Hโ โข         x โฆ[ q ] oโ โจพ Hโโฒ
-- --             โ Hโโฒ ~สฐ[ ฯ ] Hโโฒ
-- -- update-~สฐ[] (H~H โarray๐) dโ dโ = {!!}
-- -- update-~สฐ[] (H~H โ x) dโ dโ = {!!}

-- -- ~สฐ[]-lookup : {Hโ : Heap ฮโ} {Hโ : Heap ฮโ} {ฯ : Ren ฮโ ฮโ}
-- --               {xโ : ฮโ โแถ ๐} {xโ : ฮโ โแถ ๐}
-- --               {oโ : HeapObject ฮโ ๐} {oโ : HeapObject ฮโ ๐}
-- --             โ Hโ ~สฐ[ ฯ ] Hโ
-- --             โ xโ โก renVar ฯ xโ
-- --             โ oโ ~แต[ ฯ ] oโ
-- --             โ Hโ โข xโ โฆ oโ
-- --             โ Hโ โข xโ โฆ oโ
-- -- ~สฐ[]-lookup                                      (H~H โarray๐) refl o~o (there {o = oโ} d) = ~สฐ[]-lookup H~H refl {!o~o!} d
-- -- ~สฐ[]-lookup {Hโ = Hโ โ[ p ] oโโฒ} {xโ = here}     (H~H โ o~oโฒ)  xโกx  o~o here               = {!!}
-- -- ~สฐ[]-lookup {Hโ = Hโ โ[ p ] oโโฒ} {xโ = there xโ} (H~H โ o~oโฒ)  xโกx  o~o (there d)          = {!!}

-- -- ~สฐ[]-lookup[] : {Hโ Hโโฒ : Heap ฮโ} {Hโ Hโโฒ : Heap ฮโ} {ฯ : Ren ฮโ ฮโ}
-- --                 {xโ : ฮโ โแถ ๐} {xโ : ฮโ โแถ ๐}
-- --                 {oโ : HeapObject ฮโ ๐} {oโ : HeapObject ฮโ ๐}
-- --               โ Hโ ~สฐ[ ฯ ] Hโ
-- --               โ xโ โก renVar ฯ xโ
-- --               โ oโ ~แต[ ฯ ] oโ
-- --               โ Hโ โข xโ โฆ[ p ] oโ โจพ Hโโฒ
-- --               โ Hโ โข xโ โฆ[ p ] oโ โจพ Hโโฒ
-- -- ~สฐ[]-lookup[] {ฮโ = ฮโ โ ref} (Hโ~Hโ โarray๐)         refl xโกx (there d) = ~สฐ[]-lookup[] Hโ~Hโ refl {!!} d
-- -- ~สฐ[]-lookup[] {Hโโฒ = Hโโฒ โ[ x ] xโ} {xโ = here} (Hโ~Hโ โ o~oโฒ) refl o~o (here p-qโกr) = {!here p-qโกr!}
-- -- ~สฐ[]-lookup[] {ฮโ = ฮโ โ _} {xโ = there x} (Hโ~Hโ โ o~oโฒ) refl o~o (there d) = {!!}

-- -- ~แตโข : {ฯ : Ren ฮ ฮโฒ} {Eโฒ : Ren ฮโฒ ฮโฒ}
-- --       {v  : ฮ  โขแตฅ A}
-- --       {vโฒ : ฮโฒ โขแตฅ A}
-- --     โ v ~แต[ ฯ      ] renแต Eโฒ vโฒ
-- --     โ v ~แต[ ฯ โข Eโฒ ] vโฒ
-- -- ~แตโข {v = lam p t}     {lam .p tโฒ}     (lam .p ~)  = lam p {!t~t!}
-- -- ~แตโข {v = num n}       {num .n}        (num .n)    = num n
-- -- ~แตโข {v = star}        {star}          star        = star
-- -- ~แตโข {v = ! v}         { ! vโฒ}         (! ~)       = ! ~แตโข ~
-- -- ~แตโข {v = โจ vโ , vโ โฉ} {โจ vโโฒ , vโโฒ โฉ} โจ ~โ , ~โ โฉ = โจ ~แตโข ~โ , ~แตโข ~โ โฉ
-- -- ~แตโข {v = ref x}       {ref xโฒ}        (ref ~)   = {!xโกx!}

-- -- ap~แตstep : {ฯ : Ren ฮ ฮโฒ}
-- --            {v  : ฮ  โขแตฅ A} {E  : Ren ฮ ฮ}
-- --            {vโฒ : ฮโฒ โขแตฅ A}
-- --          โ renแต E v        ~แต[      ฯ ] vโฒ
-- --          โ renแต (step {๐ = ๐} E) v ~แต[ step {๐ = ๐} ฯ ] vโฒ
-- -- ap~แตstep {vโฒ = lam p x} v~v = {!v~v!}
-- -- ap~แตstep {vโฒ = num x} v~v = {!!}
-- -- ap~แตstep {vโฒ = star} v~v = {!!}
-- -- ap~แตstep {vโฒ = ! vโฒ} v~v = {!!}
-- -- ap~แตstep {vโฒ = โจ vโฒ , vโฒโ โฉ} v~v = {!!}
-- -- ap~แตstep {vโฒ = ref x} v~v = {!!}

-- ap~แตstep : {ฯ : Ren ฮ ฮโฒ}
--            {o : HeapObject ฮ ๐} {oโฒ : HeapObject ฮโฒ ๐}
--          โ               o ~แต[      ฯ ] oโฒ
--          โ renแต (step {๐ = ๐} id) o ~แต[ step {๐ = ๐} ฯ ] oโฒ
-- ap~แตstep (value v~v) = value {! ap~แตstep v~v !}
-- ap~แตstep array       = array
-- ap~แตstep lin         = lin
-- ap~แตstep โฏ           = โฏ

-- ~สฐ[]-lookup[]โฒ (H~H โarray๐) refl (there d) with ~สฐ[]-lookup[]โฒ H~H refl d
-- ... | oโฒ , o~o , d = oโฒ , {!!} , {!h o~o!} , {!!}
-- ~สฐ[]-lookup[]โฒ {xโ = here} (H~H โ o~oโฒ) refl (here p-qโกr) = {!here p-qโกr!}
-- ~สฐ[]-lookup[]โฒ {ฮโ = ฮโ โ _} {xโ = there x} (H~H โ o~oโฒ) refl (there d) = {!!}

-- FIXME: It should be possible to write ฯ explicitly, without an existential
-- copy-on-writeโin-place : {ฮ : Con n} {H Hโฒ : Heap ฮ} {x : ฮ โแถ ref}
--                        โ โ {size} โ {xs : Vec Nat size} {i : Fin size} {v : Nat}
--                        โ H โข x โฆ[ p ] array xs โจพ Hโฒ
--                        โ โ ฮป Hโณ โ H โข x โ (xs [ i ]โ v) โจพ Hโณ
--                                 ร Hโฒ โ[ p ]โ array (xs [ i ]โ v) ~สฐ[ remapRen idRen x ] Hโณ
-- copy-on-writeโin-place (vz {p} {q} {r} {H} p-qโกr arrayโกren-o) =
--   case renแต-array (sym arrayโกren-o) of ฮป { refl โ
--   H โ[ p ]โ array (_ [ _ ]โ _) , vz ,
--   ~สฐ-refl copy: vz from: vz p-qโกr arrayโกren-o with: vz
--   }
-- copy-on-writeโin-place {i} {v} (vsโฆโฒ l arrayโกren-o) =
--   case renแต-array (sym arrayโกren-o) of ฮป { refl โ
--   case copy-on-writeโin-place {i = i} {v} l of ฮป { (Hโณ , update , ~) โ
--   {!!} โ[ {!!} ]โ {!!} , vs update , {!!}
--   }
--   }

update-heap : {ฮ : Con m} {H : Heap ฮ}
         โ {x : ฮ โแถ ref}
         โ โ {size} โ {xs : Vec Nat size}
         โ (i : Fin size) (v : Nat)
         โ H โข x โฆ[ ๐ ] array xs
         โ โ ฮป Hโฒ โ H โข x โ (xs [ i ]โ v) โจพ Hโฒ
update-heap i v (vz[ ren-oโกarray ] ๐-๐โก๐) =
  case renแต-array ren-oโกarray of ฮป { refl โ
    _ , vz
  }
update-heap i v (vs[ ren-oโกarray ] l) =
  case renแต-array ren-oโกarray of ฮป { refl โ
  case update-heap i v l of ฮป { (H , u) โ
    _ , vs u
  }
  }

lookup-๐ : H โข x โฆ[ p - q ] o โจพ Hโฒ
         โ H โข x โฆ[ p - ๐ ] o โจพ H
lookup-๐ (vz[ ren-oโก ] p-qโกr) = vz[ ren-oโก ] p-๐โกp
lookup-๐ (vs[ ren-oโก ] l) = vs[ ren-oโก ] lookup-๐ l

data DeadOrAlive (Hโ : Heap ฮโ) (ฯ : Ren ฮโ ฮโ) (Hโ : Heap ฮโ) (xโ : ฮโ โแถ ๐) : Set โ where
  alive[_โจพ_โจพ_]โฆโ_โฆโ_
    : (xโ : ฮโ โแถ ๐)
    โ renVar ฯ xโ โก xโ
    โ {oโ : HeapObject ฮโ ๐}
    โ {oโ : HeapObject ฮโ ๐}
    โ renแต ฯ oโ โก oโ
    โ (lโ : Hโ โข xโ โฆ[ p ] oโ)
    โ (lโ : Hโ โข xโ โฆ[ p ] oโ)
    โ DeadOrAlive Hโ ฯ Hโ xโ

  dead
    : (l๐ : Hโ โข xโ โฆ[ ๐ ])
    โ (โxโ : โ xโ โ renVar ฯ xโ โข xโ)
    โ DeadOrAlive Hโ ฯ Hโ xโ

pattern aliveโฆโ_โฆโ_ lโ lโ = alive[_โจพ_โจพ_]โฆโ_โฆโ_ _ refl refl lโ lโ
pattern alive[_]โฆโ_โฆโ_ xโ lโ lโ = alive[_โจพ_โจพ_]โฆโ_โฆโ_ xโ refl refl lโ lโ

-- Converted from a definition to a record to prevent Agda from eta-expansion
record _~สฐ[_]_ (Hโ : Heap ฮโ) (ฯ : Ren ฮโ ฮโ) (Hโ : Heap ฮโ) : Set โ where
  constructor upToRen
  field
    classify : โ {A} {๐ : ConItem A}
             โ (xโ : ฮโ โแถ ๐)
             โ DeadOrAlive Hโ ฯ Hโ xโ

open _~สฐ[_]_

~สฐโฒ-extend : {ฮโ : Con n} {ฮโ : Con m}
             {Hโ : Heap ฮโ} {Hโ : Heap ฮโ}
           โ {oโ : HeapObject ฮโ ๐}
           โ {ฯ : Ren ฮโ ฮโ}
           โ Hโ                   ~สฐ[ ฯ ] Hโ
           โ Hโ โ[ p ]โ renแต ฯ oโ ~สฐ[ liftRen ฯ ] Hโ โ[ p ]โ oโ
~สฐโฒ-extend ~ .classify vz = aliveโฆโ vz[ renแต-interchange _ _ ] p-๐โกp โฆโ vz[] p-๐โกp
~สฐโฒ-extend {ฯ = ฯ} ~ .classify (vs xโ) =
  case ~ .classify xโ of ฮป where
    (alive[ xโ ]โฆโ lโ โฆโ lโ) โ
      alive[ vs xโ
           โจพ renVar-lift-vs ฯ xโ
           โจพ sym (renแต-interchange ฯ _)
           ]โฆโ vs[] lโ
            โฆโ vs[] lโ
    (dead (o , l๐) โxโ) โ
      dead
        (ren1แต o , (vs[] l๐))
        (ฮป xโ [lift-ฯ]xโโกvs-xโ โ
          case renVar-unlift-vs _ xโ xโ [lift-ฯ]xโโกvs-xโ of ฮป { (xโโฒ , refl , ฯxโโฒโกxโ) โ
          โxโ xโโฒ ฯxโโฒโกxโ
          })

~สฐ-lookup : {ฮโ : Con n} {ฮโ : Con m}
            {Hโ : Heap ฮโ} {Hโ : Heap ฮโ}
            {xโ : ฮโ โแถ ๐} {xโ : ฮโ โแถ ๐}
            {ฯ : Ren ฮโ ฮโ}
          โ Hโ ~สฐ[ ฯ ] Hโ
          โ renVar ฯ xโ โก xโ
          โ {oโ : HeapObject ฮโ ๐}
          โ {oโ : HeapObject ฮโ ๐}
          โ renแต ฯ oโ โก oโ
          โ p โข ๐
          โ Hโ โข xโ โฆ[ p ] oโ
          โ Hโ โข xโ โฆ[ p ] oโ
~สฐ-lookup {xโ = xโ} {ฯ = ฯ} ~ ฯxโโก ฯoโโก pโข๐ l = case ~ .classify xโ of ฮป where
  (alive[ xโ ]โฆโ lโ โฆโ lโ) โ
    case renVar-inj ฯ _ xโ ฯxโโก of ฮป { refl โ
    case lookup-det l lโ of ฮป { (refl , refl , refl) โ
    case renแต-inj ฯ _ _ ฯoโโก of ฮป { refl โ
    lโ
    }
    }
    }
  (dead (o , l๐) โxโ) โ
    case lookup-det l l๐ of ฮป { (pโก๐ , _ , _) โ
    โฅ-elim (pโข๐ pโก๐)
    }

-- - ๐ ๐ ฯ
-- ๐ ๐ โฅ โฅ
-- ๐ ๐ ๐ โฅ
-- ฯ ฯ ฯ ฯ
--
-- ๐   ๐
--  \ /
--   ฯ
--
-- โค ๐ ๐ ฯ
-- ๐ โค โฅ โฅ
-- ๐ โฅ โค โฅ
-- ฯ โค โค โค
โฆ[]โโฆ[-] : p - q โก r
         โ H โข x โฆ[ p ] o
         โ โ ฮป Hโฒ
             โ H โข x โฆ[ p - q ] o โจพ Hโฒ
โฆ[]โโฆ[-] p-qโกr (vz[] _) = _ , vz[] p-qโกr
โฆ[]โโฆ[-] p-qโกr (vs[] l) = case โฆ[]โโฆ[-] p-qโกr l of ฮป { (_ , l) โ _ , (vs[] l) }

โฆ[-]โโฆ[] : H โข x โฆ[ p - q ] o โจพ Hโฒ
         โ H โข x โฆ[ p ] o
โฆ[-]โโฆ[] (vz[] _) = vz[] p-๐โกp
โฆ[-]โโฆ[] (vs[] l) = vs[] โฆ[-]โโฆ[] l

โฆ[-]โ-โก : H โข x โฆ[ p - q ] o โจพ Hโฒ
        โ โ ฮป r โ p - q โก r
โฆ[-]โ-โก (vz[] p-qโกr) = _ , p-qโกr
โฆ[-]โ-โก (vs[] l) = โฆ[-]โ-โก l

~สฐ-post-lookup : {ฮโ : Con n} {ฮโ : Con m}
                 {ฯ : Ren ฮโ ฮโ}
                 {Hโ Hโโฒ : Heap ฮโ} {Hโ Hโโฒ : Heap ฮโ}
                 {xโ : ฮโ โแถ ๐}
                 {oโ : HeapObject ฮโ ๐}
               โ Hโ ~สฐ[ ฯ ] Hโ
               โ Hโ โข renVar ฯ xโ โฆ[ p - q ] renแต ฯ oโ โจพ Hโโฒ
               โ Hโ โข          xโ โฆ[ p - q ]        oโ โจพ Hโโฒ
               โ Hโโฒ ~สฐ[ ฯ ] Hโโฒ
~สฐ-post-lookup {ฯ = ฯ} {xโ = xโ} ~ lโ lโ .classify xโ =
  case dec-var (renVar ฯ xโ) xโ of ฮป where
    (yes (refl , refl , refl)) โ case ~ .classify xโ of ฮป where
      (alive[ xโ โจพ eq โจพ eqโฒ ]โฆโ lโ โฆโ lโ) โ alive[ xโ โจพ eq โจพ eqโฒ ]โฆโ {!lโ!} โฆโ {!!}
      (dead l๐ โxโ) โ {!!}
    (no โข) โ case ~ .classify xโ of ฮป where
      (alive[ xโ โจพ eq โจพ eqโฒ ]โฆโ lโ โฆโ lโ) โ alive[ xโ โจพ eq โจพ eqโฒ ]โฆโ {!lโ!} โฆโ {!!}
      (dead l๐ โxโ) โ {!!}
-- case ~ xโ of ฮป where
--   (aliveโฆโ lโ โฆโ lโ) โ {!!}
--   (dead l๐ โxโ) โ {!!}

~สฐ-lookupโฒ : {ฮโ : Con n} {ฮโ : Con m}
             {ฯ : Ren ฮโ ฮโ}
             {Hโ Hโโฒ : Heap ฮโ} {Hโ : Heap ฮโ}
             {xโ : ฮโ โแถ ๐}
             {oโ : HeapObject ฮโ ๐}
           โ Hโ ~สฐ[ ฯ ] Hโ
           โ Hโ โข xโ โฆ[ p - q ] oโ โจพ Hโโฒ
           โ p โข ๐
           โ โโ ฮป (Hโโฒ : Heap ฮโ)
                  (xโ : ฮโ โแถ ๐)
                  (oโ : HeapObject ฮโ ๐)
                โ (Hโ โข xโ โฆ[ p - q ] oโ โจพ Hโโฒ)
                ร xโ โก renVar ฯ xโ
                ร oโ โก renแต ฯ oโ
                ร Hโโฒ ~สฐ[ ฯ ] Hโโฒ
~สฐ-lookupโฒ {xโ = xโ} ~ l pโข๐ = case ~ .classify xโ of ฮป where
  (alive[ xโ โจพ refl โจพ refl ]โฆโ lโ โฆโ lโ) โ
    case lookup-det (โฆ[-]โโฆ[] l) lโ of ฮป { (refl , refl , refl) โ
    case โฆ[]โโฆ[-] (โฆ[-]โ-โก l .projโ) lโ of ฮป { (Hโโฒ , lโโฒ) โ
    Hโโฒ , xโ , _ , lโโฒ , refl , refl , ~สฐ-post-lookup ~ l lโโฒ
    }
    }
  (dead l๐ โxโ) โ {!!}

post-lookup : p - q โก r
            โ H  โข x โฆ[ p - q ] o โจพ Hโฒ
            โ Hโฒ โข x โฆ[ r ] o
post-lookup {r = r} p-qโกr (vz[] p-qโกrโฒ) =
  case -โก-functional p-qโกr p-qโกrโฒ of ฮป { refl โ
  vz[] p-๐โกp
  }
post-lookup p-qโกr (vs[] l) = vs[] post-lookup p-qโกr l

post-lookup-โข : {pโฒ : M}
              โ Distinct x y
              โ H  โข x โฆ[ pโฒ - q ] o โจพ Hโฒ
              โ H  โข y โฆ[ p ] oโฒ
              โ Hโฒ โข y โฆ[ p ] oโฒ
post-lookup-โข _   (vz[] _)   (vs[] l-y) = vs[] l-y
post-lookup-โข _   (vs[] l-x) (vz[] _)   = vz[] p-๐โกp
post-lookup-โข xโขy (vs[] l-x) (vs[] l-y) = vs[] post-lookup-โข xโขy l-x l-y

post-update : H  โข x โ xs โจพ Hโฒ
            โ Hโฒ โข x โฆ[ ๐ ] array xs
post-update vz = vz[] p-๐โกp
post-update (vs u) = vs[] post-update u

post-update-โข : Distinct x y
              โ H  โข x โ xs โจพ Hโฒ
              โ H  โข y โฆ[ p ] oโฒ
              โ Hโฒ โข y โฆ[ p ] oโฒ
post-update-โข _   vz       (vs[] l-y) = vs[] l-y
post-update-โข _   (vs l-x) (vz[] _)   = vz[] p-๐โกp
post-update-โข xโขy (vs l-x) (vs[] l-y) = vs[] post-update-โข xโขy l-x l-y

copy-on-writeโin-place : {ฮโ : Con n} {ฮโ : Con m} {Hโ Hโโฒ : Heap ฮโ} {Hโ : Heap ฮโ}
                       โ {x : ฮโ โแถ ref} {ฯ : Ren ฮโ ฮโ}
                       โ โ {size} โ {xs : Vec Nat size}
                       โ Hโ ~สฐ[ ฯ ] Hโ
                       โ Hโ โข renVar ฯ x โฆ[ ๐ - ๐ ] array xs โจพ Hโโฒ
                       โ (i : Fin size) (v : Nat)
                       โ โ ฮป Hโโฒ โ Hโ โข x โ (xs [ i ]โ v) โจพ Hโโฒ
                                 ร Hโโฒ โ[ ๐ ]โ array (xs [ i ]โ v) ~สฐ[ remapRen x ฯ ] Hโโฒ
copy-on-writeโin-place {x = x} {ฯ = ฯ} ~ l i v =
  case lookupโwrite l i v of ฮป { (_ , u) โ
  case update-heap i v (~สฐ-lookup ~ refl refl ๐โข๐ (lookup-๐ l)) of ฮป { (Hโโฒ , uโฒ) โ
  Hโโฒ , uโฒ , upToRen ฮป where
    vz โ
      alive[ x
           โจพ renVar-remap-vz ฯ x
           โจพ refl
           ]โฆโ vz[] p-๐โกp
            โฆโ post-update uโฒ
    (vs xโ) โ
      case dec-var xโ (renVar ฯ x) of ฮป where
        (no โข) โ case ~ .classify xโ of ฮป where
          (alive[ xโ โจพ ฯxโโกxโ โจพ ฯoโโกoโ ]โฆโ lโ โฆโ lโ) โ
            alive[ xโ
                 โจพ renVar-remap-vs ฯ xโ x xโ ฯxโโกxโ
                    (โขโDistinct xโ x ฮป where
                      (refl , refl , refl) โ โข (refl , refl , sym ฯxโโกxโ))
                 โจพ renแตโrenแต-remap ฯ x ฯoโโกoโ
                 ]โฆโ vs[]
                    post-lookup-โข
                      (โขโDistinct (renVar ฯ x) xโ ฮป where (refl , refl , refl) โ โข (refl , refl , refl))
                      l lโ
                  โฆโ
                    post-update-โข
                      (โขโDistinct x xโ ฮป where (refl , refl , refl) โ โข (refl , refl , sym ฯxโโกxโ))
                      uโฒ lโ
          (dead (o , xโโฆ[๐]) โxโ) โ
            dead
              ( ren1แต o
              , vs[]
                  post-lookup-โข
                    (โขโDistinct (renVar ฯ x) xโ ฮป where (refl , refl , refl) โ โข (refl , refl , refl))
                    l xโโฆ[๐]
              )
              (ฮป xโ [remap-x-ฯ]โกvs-xโ โ โxโ xโ (renVar-unremap-vs ฯ xโ x xโ [remap-x-ฯ]โกvs-xโ))
        (yes (refl , refl , refl)) โ dead
          (array _ , vs[] post-lookup ๐-๐โก๐ l)
          (ฮป xโ [remap-x-ฯ]xโโกvs-ฯx โ ยฌDistinct-refl (renVar ฯ x) (renVar-unremap-โข ฯ xโ x (vs renVar ฯ x) [remap-x-ฯ]xโโกvs-ฯx))
  }
  }
