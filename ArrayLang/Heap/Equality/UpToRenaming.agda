{-# OPTIONS --hidden-argument-puns #-}
open import Graded.Modality
import Graded.Modality.Properties.Subtraction as Subtraction

module ArrayLang.Heap.Equality.UpToRenaming
  {โ} {M : Set โ}
  (๐ : Modality M)
  (open Modality ๐)
  (open Subtraction semiring-with-meet)
  (๐-๐โก๐ : ๐ - ๐ โก ๐)
  where

open import Graded.Modality.Properties.Has-well-behaved-zero semiring-with-meet

open import Agda.Primitive

open import ArrayLang.Syntax ๐
open import ArrayLang.Usage ๐
open import ArrayLang.Heap ๐
open import ArrayLang.Heap.Properties ๐

open import Tools.Empty
open import Tools.Unit
open import Tools.Bool
open import Tools.Nat hiding (_โค_)
open import Tools.Fin
open import Tools.Product
open import Tools.Sum using (_โ_; injโ; injโ)
open import Tools.Relation
open import Tools.Function
open import Tools.Reasoning.PropositionalEquality
open import Tools.PropositionalEquality

open import Function.Base using (_$_; _$โฒ_; _โ_)
open import Data.Product using (ฮฃ-syntax; โ)

private
  variable
    p q r : M
    n nโฒ m mโฒ k : Nat
    ฮ ฮโฒ ฮ ฮโฒ : Con _
    A B C : Type
    ฯ ฯ E Eโฒ Eโ Eโโฒ Eโ Eโโฒ : Ren _ _
    t tโฒ u uโฒ tโ tโโฒ tโ tโโฒ tโ tโโฒ : _ โข _
    x y : _ โแถ _
    -- v vโฒ vโ vโโฒ vโ vโโฒ vโ vโโฒ : _ โขแตฅ _
    H Hโฒ Hโณ : Heap _
    o oโฒ : HeapObject _ _

------------------------------------------------------------------------
-- Equality of terms via a weakening

-- We could make the renaming `Ren ฮ ฮ` a parameter instead of an index,
-- but this would require an additional syntax declaration.

infix 5 _~แต[_]_
data _~แต[_]_ {ฮ : Con n} {ฮ : Con m} : ฮ โข A โ Ren ฮ ฮ โ ฮ โข A โ Set โ where
  var : {ฯ : Ren ฮ ฮ}
        (x : ฮ โแถ A)
        {xโฒ : ฮ โแถ A}
      โ xโฒ โก renVar ฯ x
      โ ` xโฒ ~แต[ ฯ ] ` x

  lam : โ p
      โ t ~แต[ liftRen ฯ ]  tโฒ
      โ lam p t ~แต[ ฯ ] lam p tโฒ

  _โ_ : tโ      ~แต[ ฯ ] tโโฒ
      โ      tโ ~แต[ ฯ ]       tโโฒ
      โ tโ โ tโ ~แต[ ฯ ] tโโฒ โ tโโฒ

  zero : zero ~แต[ ฯ ] zero
  suc  :     t ~แต[ ฯ ] tโฒ
       โ suc t ~แต[ ฯ ] suc tโฒ

  star : star ~แต[ ฯ ] star
  letโ[_]_ :       tโ      ~แต[ ฯ ]       tโโฒ
           โ            tโ ~แต[ ฯ ]             tโโฒ
           โ letโ[ tโ ] tโ ~แต[ ฯ ] letโ[ tโโฒ ] tโโฒ

  !_ :   t ~แต[ ฯ ]   tโฒ
     โ ! t ~แต[ ฯ ] ! tโฒ
  let![_]_ :       tโ      ~แต[ ฯ ]       tโโฒ
           โ            tโ ~แต[ liftRen ฯ ]        tโโฒ
           โ let![ tโ ] tโ ~แต[ ฯ ] let![ tโโฒ ] tโโฒ

  โจ_,_โฉ :   tโ        ~แต[ ฯ ]   tโโฒ
        โ        tโ   ~แต[ ฯ ]         tโโฒ
        โ โจ tโ , tโ โฉ ~แต[ ฯ ] โจ tโโฒ , tโโฒ โฉ
  letโ[_]_ :      tโ       ~แต[ ฯ ]       tโโฒ
           โ            tโ ~แต[ liftRen (liftRen ฯ) ] tโโฒ
           โ letโ[ tโ ] tโ ~แต[ ฯ ] letโ[ tโโฒ ] tโโฒ

  linearly  :          t ~แต[ liftRen ฯ ]     tโฒ
            โ linearly t ~แต[ ฯ ] linearly tโฒ
  consume   :         t ~แต[ ฯ ]         tโฒ
            โ consume t ~แต[ ฯ ] consume tโฒ
  duplicate :           t ~แต[ ฯ ]           tโฒ
            โ duplicate t ~แต[ ฯ ] duplicate tโฒ

  new   :     tโ    ~แต[ ฯ ]     tโโฒ
        โ        tโ ~แต[ ฯ ]         tโโฒ
        โ new tโ tโ ~แต[ ฯ ] new tโโฒ tโโฒ

  read  :      tโ    ~แต[ ฯ ]      tโโฒ
        โ         tโ ~แต[ ฯ ]          tโโฒ
        โ read tโ tโ ~แต[ ฯ ] read tโโฒ tโโฒ

  write :       tโ       ~แต[ ฯ ]       tโโฒ
        โ          tโ    ~แต[ ฯ ]           tโโฒ
        โ             tโ ~แต[ ฯ ]               tโโฒ
        โ write tโ tโ tโ ~แต[ ฯ ] write tโโฒ tโโฒ tโโฒ

  free  :      t ~แต[ ฯ ]      tโฒ
        โ free t ~แต[ ฯ ] free tโฒ

~แต-refl : ren ฯ t ~แต[ ฯ ] t
~แต-refl {t = ` x}         = var x refl
~แต-refl {t = lam p _}     = lam p ~แต-refl
~แต-refl {t = _ โ _}       = ~แต-refl โ ~แต-refl
~แต-refl {t = zero}        = zero
~แต-refl {t = suc _}       = suc ~แต-refl
~แต-refl {t = star}        = star
~แต-refl {t = letโ[ _ ] _} = letโ[ ~แต-refl ] ~แต-refl
~แต-refl {t = ! _}         = ! ~แต-refl
~แต-refl {t = let![ _ ] _} = let![ ~แต-refl ] ~แต-refl
~แต-refl {t = โจ _ , _ โฉ}   = โจ ~แต-refl , ~แต-refl โฉ
~แต-refl {t = letโ[ _ ] _} = letโ[ ~แต-refl ] ~แต-refl
~แต-refl {t = linearly _}  = linearly ~แต-refl
~แต-refl {t = consume _}   = consume ~แต-refl
~แต-refl {t = duplicate _} = duplicate ~แต-refl
~แต-refl {t = new _ _}     = new ~แต-refl ~แต-refl
~แต-refl {t = read _ _}    = read ~แต-refl ~แต-refl
~แต-refl {t = write _ _ _} = write ~แต-refl ~แต-refl ~แต-refl
~แต-refl {t = free _}      = free ~แต-refl

~แตโโก : t ~แต[ ฯ ] tโฒ โ t โก ren ฯ tโฒ
~แตโโก (var xโฒ refl)    = refl
~แตโโก (lam p ~)        = cong (lam p) (~แตโโก ~)
~แตโโก (~โ โ ~โ)        = congโ _โ_ (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก zero             = refl
~แตโโก (suc ~)          = cong suc (~แตโโก ~)
~แตโโก star             = refl
~แตโโก (letโ[ ~โ ] ~โ)  = congโ letโ[_]_ (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (! ~)            = cong !_        (~แตโโก ~)
~แตโโก (let![ ~โ ] ~โ)  = congโ let![_]_ (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก โจ ~โ , ~โ โฉ      = congโ โจ_,_โฉ    (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (letโ[ ~โ ] ~โ)  = congโ letโ[_]_ (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (linearly ~)     = cong linearly  (~แตโโก ~)
~แตโโก (consume ~)      = cong consume   (~แตโโก ~)
~แตโโก (duplicate ~)    = cong duplicate (~แตโโก ~)
~แตโโก (new ~โ ~โ)      = congโ new      (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (read ~โ ~โ)     = congโ read     (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (write ~โ ~โ ~โ) = congโ write    (~แตโโก ~โ) (~แตโโก ~โ) (~แตโโก ~โ)
~แตโโก (free ~)         = cong free      (~แตโโก ~)

โกโ~แต : t โก ren ฯ tโฒ โ t ~แต[ ฯ ] tโฒ
โกโ~แต refl = ~แต-refl

------------------------------------------------------------------------
-- Equality of values up to weakening

infix 5 _~แต[_]_
_~แต[_]_ : {ฮ : Con n} {ฮ : Con m}
        โ ฮ โขแตฅ A โ Ren ฮ ฮ
        โ ฮ โขแตฅ A โ Set โ
(t , v) ~แต[ ฯ ] (tโฒ , vโฒ) = t ~แต[ ฯ ] tโฒ

substValue : t ~แต[ ฯ ] tโฒ โ Value t โ Value tโฒ
substValue (lam p ~)     (lam p t) = lam p _
substValue zero          zero = zero
substValue (suc ~)       (suc v) = suc (substValue ~ v)
substValue star          star  = star
substValue (! ~)         (! v) = ! substValue ~ v
substValue โจ ~โ , ~โ โฉ   โจ vโ , vโ โฉ = โจ substValue ~โ vโ , substValue ~โ vโ โฉ
substValue (var x refl)  (ref _) = ref x
substValue (var x refl)  (lin _) = lin x

private
  variable
    v vโฒ : _ โขแตฅ _

~แตโ~แต : โฆ v โฆแต ~แต[ ฯ ] โฆ vโฒ โฆแต โ v ~แต[ ฯ ] vโฒ
~แตโ~แต ~ = ~

~แต-refl : (v : ฮ โขแตฅ A) โ renแต ฯ v ~แต[ ฯ ] v
~แต-refl _ = ~แต-refl

postulate
  ~แตโโก : v ~แต[ ฯ ] vโฒ โ v โก renแต ฯ vโฒ

โกโโผแต : v โก renแต ฯ vโฒ โ v ~แต[ ฯ ] vโฒ
โกโโผแต {vโฒ} refl = ~แต-refl vโฒ

------------------------------------------------------------------------
-- Elimator equality up to weakening

mutual
  _~แต[_]_ : Elim ฮ A B โ Ren ฮ ฮ โ Elim ฮ A B โ Set โ
  e ~แต[ ฯ ] eโฒ = _ โท e ~แต[ ฯ ] eโฒ

  infix 5 _โท_~แต[_]_
  data _โท_~แต[_]_ {ฮ : Con n} {ฮโฒ : Con m}
    : โ B
    โ Elim ฮ A B
    โ Ren ฮ ฮโฒ
    โ Elim ฮโฒ A B
    โ Set โ where
    -โโ_ : {u  : ฮ โข A} {uโฒ : ฮโฒ โข A}
         โ ren E u ~แต[ ฯ ] ren Eโฒ uโฒ
         โ B โท (-โโจ p โฉโ u) E ~แต[ ฯ ] (-โโจ p โฉโ uโฒ) Eโฒ

    _โโ- : {v  : ฮ โขแตฅ A [ p ]โ B} {vโฒ : ฮโฒ โขแตฅ A [ p ]โ B}
         โ renแต E v ~แต[ ฯ ] renแต Eโฒ vโฒ
         โ B โท (v โโจ p โฉโ-) E ~แต[ ฯ ] (vโฒ โโจ p โฉโ-) Eโฒ

    sucโ : sucโ ~แต[ ฯ ] sucโ

    !-โ : ! B โท !-โ ~แต[ ฯ ] !-โ

    โจ-,_โฉโ : {u  : ฮ  โข B} {uโฒ : ฮโฒ โข B}
             {E  : Ren ฮ ฮ} {Eโฒ : Ren ฮโฒ ฮโฒ}
           โ ren E u ~แต[ ฯ ] ren Eโฒ uโฒ
           โ A โ _ โท โจ-, u โฉโ E ~แต[ ฯ ] โจ-, uโฒ โฉโ Eโฒ
    โจ_,-โฉโ : {v  : ฮ  โขแตฅ A}
             {vโฒ : ฮโฒ โขแตฅ A}
             {ฯ : Ren ฮ ฮโฒ}
           โ ren E โฆ v โฆแต ~แต[ ฯ ] ren Eโฒ โฆ vโฒ โฆแต
           โ _ โ B โท โจ v ,-โฉโ E ~แต[ ฯ ] โจ vโฒ ,-โฉโ Eโฒ

    letโ[-]โ : {u : ฮ  โข B} {uโฒ : ฮโฒ โข B}
               {E : Ren ฮ ฮ} {Eโฒ : Ren ฮโฒ ฮโฒ}
             โ ren E u          ~แต[ ฯ ] ren Eโฒ uโฒ
             โ B โท letโ[-]โ u E ~แต[ ฯ ] letโ[-]โ uโฒ Eโฒ

    let![-]โ : {u : ฮ  โ A โข B} {uโฒ : ฮโฒ โ A โข B}
               {E : Ren ฮ ฮ} {Eโฒ : Ren ฮโฒ ฮโฒ}
             โ ren (liftRen E) u    ~แต[ liftRen ฯ ] ren (liftRen Eโฒ) uโฒ
             โ B โท let![-]โ u E ~แต[      ฯ ] let![-]โ uโฒ Eโฒ

    letโ[-]โ : {u : ฮ  โ A โ B โข C} {uโฒ : ฮโฒ โ A โ B โข C}
               {E : Ren ฮ ฮ} {Eโฒ : Ren ฮโฒ ฮโฒ}
             โ ren (liftRen (liftRen E)) u ~แต[ liftRen (liftRen ฯ) ] ren (liftRen (liftRen Eโฒ)) uโฒ
             โ C โท letโ[-]โ u E     ~แต[             ฯ ] letโ[-]โ uโฒ Eโฒ

    linearlyโ : {x : ฮ โแถ Lin} {xโฒ : ฮโฒ โแถ Lin}
              โ ! A โท linearlyโ (renVar ฯ xโฒ) ~แต[ ฯ ] linearlyโ xโฒ

    consumeโ   : consumeโ   ~แต[ ฯ ] consumeโ
    duplicateโ : duplicateโ ~แต[ ฯ ] duplicateโ

    newโโ : ren E tโ    ~แต[ ฯ ] ren Eโฒ tโโฒ
          โ newโโ tโ E ~แต[ ฯ ] newโโ tโโฒ Eโฒ
    newโโ : โ {s}
          โ newโโ s ~แต[ ฯ ] newโโ s

    readโโ : ren E t    ~แต[ ฯ ] ren Eโฒ tโฒ
           โ readโโ t E ~แต[ ฯ ] readโโ tโฒ Eโฒ
    readโโ : โ {i}
           โ readโโ i ~แต[ ฯ ] readโโ i

    writeโโ : ren E tโ         ~แต[ ฯ ] ren Eโฒ tโโฒ
            โ ren E tโ         ~แต[ ฯ ] ren Eโฒ tโโฒ
            โ writeโโ tโ tโ E ~แต[ ฯ ] writeโโ tโโฒ tโโฒ Eโฒ
    writeโโ : โ {v}
            โ ren E tโ         ~แต[ ฯ ] ren Eโฒ tโโฒ
            โ writeโโ tโ v E  ~แต[ ฯ ] writeโโ tโโฒ v Eโฒ
    writeโโ : โ {i v}
            โ writeโโ i v ~แต[ ฯ ] writeโโ i v

    freeโ   : freeโ ~แต[ ฯ ] freeโ

private
  variable
    e eโฒ : Elim _ _ _

postulate
  ~แตโโก : e ~แต[ ฯ ] eโฒ โ e โก renแต ฯ eโฒ
  ~แต-refl : renแต ฯ e ~แต[ ฯ ] e

โกโ~แต : e โก renแต ฯ eโฒ
    โ e ~แต[ ฯ ] eโฒ
โกโ~แต refl = ~แต-refl

~แตโโฃโกโฃ : {ฯ : Ren ฮ ฮโฒ} {e : Elim ฮ A B} {eโฒ : Elim ฮโฒ A B}
       โ e ~แต[ ฯ ] eโฒ
       โ โฃ e โฃแต โก โฃ eโฒ โฃแต
~แตโโฃโกโฃ (-โโ ~)        = refl
~แตโโฃโกโฃ (~ โโ-)        = refl
~แตโโฃโกโฃ sucโ           = refl
~แตโโฃโกโฃ !-โ            = refl
~แตโโฃโกโฃ โจ-, ~ โฉโ       = refl
~แตโโฃโกโฃ โจ ~ ,-โฉโ       = refl
~แตโโฃโกโฃ (letโ[-]โ ~)   = refl
~แตโโฃโกโฃ (let![-]โ ~)   = refl
~แตโโฃโกโฃ (letโ[-]โ ~)   = refl
~แตโโฃโกโฃ linearlyโ      = refl
~แตโโฃโกโฃ consumeโ       = refl
~แตโโฃโกโฃ duplicateโ     = refl
~แตโโฃโกโฃ (newโโ ~)      = refl
~แตโโฃโกโฃ newโโ          = refl
~แตโโฃโกโฃ (readโโ ~)     = refl
~แตโโฃโกโฃ readโโ         = refl
~แตโโฃโกโฃ (writeโโ ~ ~โ) = refl
~แตโโฃโกโฃ (writeโโ ~)    = refl
~แตโโฃโกโฃ writeโโ        = refl
~แตโโฃโกโฃ freeโ          = refl

------------------------------------------------------------------------
-- Stack equality up to weakening

data _~S[_]_ {n m} {ฮ : Con n} {ฮ : Con m}
  : Stack ฮ A B
  โ Ren ฮ ฮ
  โ Stack ฮ A B
  โ Set โ where
  ฮต   : (Stack ฮ A A โ ฮต) ~S[ ฯ ] (Stack ฮ A A โ ฮต)
  _โ_ : {e  : Elim ฮ A B} {S  : Stack ฮ B C}
        {eโฒ : Elim ฮ A B} {Sโฒ : Stack ฮ B C}
      โ e     ~แต[ ฯ ] eโฒ
      โ     S ~S[ ฯ ]      Sโฒ
      โ e โ S ~S[ ฯ ] eโฒ โ Sโฒ

private
  variable
    S Sโฒ : Stack _ _ _

~S-refl : renหข ฯ S ~S[ ฯ ] S
~S-refl {S = ฮต} = ฮต
~S-refl {S = e โ S} = ~แต-refl โ ~S-refl

~Sโโก : S ~S[ ฯ ] Sโฒ
     โ S โก renหข ฯ Sโฒ
~Sโโก ฮต = refl
~Sโโก (~e โ ~S) = congโ _โ_ (~แตโโก ~e) (~Sโโก ~S)

โกโ~S : S โก renหข ฯ Sโฒ
     โ S ~S[ ฯ ] Sโฒ
โกโ~S refl = ~S-refl

~Sโโฃโกโฃ : S ~S[ ฯ ] Sโฒ
       โ โฃ S โฃ โก โฃ Sโฒ โฃ
~Sโโฃโกโฃ ฮต = refl
~Sโโฃโกโฃ {S = e โ S} {Sโฒ = eโฒ โ Sโฒ} (e~e โ S~S) with is-linearlyโ e | is-linearlyโ eโฒ
... | true  | true  = refl
... | true  | false = {!   !}
... | false | true  = {!   !}
... | false | false = congโ _ยท_ (~Sโโฃโกโฃ S~S) (~แตโโฃโกโฃ e~e)

------------------------------------------------------------------------
-- Heap object equality up to weakening

open import Data.Vec using (Vec; lookup; _[_]โ_; replicate)

private
  variable
    ฮโ ฮโ : Con _
    xs xsโฒ : Vec Nat _

data _~แต[_]_ : HeapObject ฮโ A โ Ren ฮโ ฮโ โ HeapObject ฮโ A โ Set โ where
  value : renแต E v     ~แต[ ฯ ] renแต Eโฒ vโฒ
        โ value v E   ~แต[ ฯ ] value vโฒ Eโฒ
  array : array xs    ~แต[ ฯ ] array xs
  lin   : lin         ~แต[ ฯ ] lin
  โฏ     : (HeapObject ฮ (A) โ โฏ) ~แต[ ฯ ] โฏ

------------------------------------------------------------------------
-- Heap equality up to renaming

data DeadOrShared (Hโ : Heap ฮโ) (ฯ : Ren ฮโ ฮโ) (Hโ : Heap ฮโ) (xโ : ฮโ โแถ A) : Set โ where
  shared[_โจพ_โจพ_]โฆโ_โฆโ_
    : (xโ : ฮโ โแถ A)
    โ renVar ฯ xโ โก xโ
    โ {oโ : HeapObject ฮโ A}
    โ {oโ : HeapObject ฮโ A}
    โ renแต ฯ oโ โก oโ
    โ (lโ : Hโ โข xโ โฆ[ p ] oโ)
    โ (lโ : Hโ โข xโ โฆ[ p ] oโ)
    โ DeadOrShared Hโ ฯ Hโ xโ

  dead
    : A โก Arr
    โ (l๐ : Hโ โข xโ โฆ[ ๐ ])
    โ (โxโ : โ xโ โ renVar ฯ xโ โข xโ)
    โ DeadOrShared Hโ ฯ Hโ xโ

pattern sharedโฆโ_โฆโ_ lโ lโ = shared[_โจพ_โจพ_]โฆโ_โฆโ_ _ refl refl lโ lโ
pattern shared[_]โฆโ_โฆโ_ xโ lโ lโ = shared[_โจพ_โจพ_]โฆโ_โฆโ_ xโ refl refl lโ lโ

record _~สฐ[_]_ (Hโ : Heap ฮโ) (ฯ : Ren ฮโ ฮโ) (Hโ : Heap ฮโ) : Set โ where
  constructor upToRen
  field
    classify : (xโ : ฮโ โแถ A) โ DeadOrShared Hโ ฯ Hโ xโ

open _~สฐ[_]_

-- module _ where
--   open Data.Vec
--   _ : ฮต โ[ ๐ ]โ array (0 โท [])
--         โ[ ฯ ]โ value (_ , zero) ฮต
--         โ[ ๐ ]โ array (1 โท [])
--         โ[ ๐ ]โ array (2 โท [])

--       ~สฐ[ ฮต โ[ tt ] vz โ[ tt , tt ] vs vs vz ]

--       ฮต โ[ ๐ ]โ array (2 โท [])
--         โ[ ฯ ]โ value (_ , zero) ฮต
--   _ = ฮตโ โโ โโ
--       copy: vs vz
--       from: vs[] vz[] ๐-๐โก๐
--       with: vs vz
--       copy: vs vz
--       from: vz[] ๐-๐โก๐
--       with: vs vz

-- _ : ฮต โ[ ๐ ] array (1 โท [])       -- ----+
--       โ[ ๐ ] array (2 โท [])       -- --+ |
--       โ[ ฯ ] value (_ , zero) ?   --   | |
--       โ[ ๐ ] array (2 โท [])       -- <-+ |
--       โ[ ๐ ] array (1 โท [])       -- <---+

--       ~สฐ[ vs vs vz โท vs vz โท vz โท [] ]

--     ฮต โ[ ๐ ] array (1 โท [])
--       โ[ ๐ ] array (2 โท [])
--       โ[ ฯ ] value (_ , zero) ?
-- _ = ฮตโ โ โ โ
--     copy: vs vz             -- array (2 โท [])
--     from: vs vz ๐-๐โก๐
--     copy: vs vs vz          -- array (1 โท [])
--     from: vs vs vs vz ๐-๐โก๐

------------------------------------------------------------------------
-- Properties of heap equality

~สฐ-refl : H ~สฐ[ idRen ] H
~สฐ-refl {H = ฮต} .classify ()
~สฐ-refl {H = H โ[ p ]โ o} .classify vz =
  shared[
    vz โจพ
    renVar-id โจพ
    renแต-id (ren1แต o)
  ]โฆโ vz[] p-๐โกp
   โฆโ vz[] p-๐โกp
~สฐ-refl {H = H โ[ p ]โ o} .classify (vs x) with ~สฐ-refl {H = H} .classify x
... | shared[ xโ โจพ refl โจพ refl ]โฆโ lโ โฆโ lโ =
  shared[ vs xโ โจพ renVar-step idRen xโ โจพ sym (renแต-interchange idRen _) ]โฆโ vs[] lโ โฆโ vs[] lโ
... | dead refl l๐ โxโ = โฅ-elim (โxโ x renVar-id)

update-heap : {ฮ : Con m} {H : Heap ฮ} {x : ฮ โแถ Arr}
         โ โ {size} โ {xs : Vec Nat size}
         โ (i : Fin size) (v : Nat)
         โ H โข x โฆ[ ๐ ] array xs
         โ โ ฮป Hโฒ โ H โข x โ (xs [ i ]โ v) โจพ Hโฒ
update-heap i v (vz[ ren-oโกarray ] ๐-๐โก๐) =
  case renแต-array ren-oโกarray of ฮป { refl โ
    _ , vz
  }
update-heap i v (vs[ ren-oโกarray ] l) =
  case renแต-array ren-oโกarray of ฮป { refl โ
  case update-heap i v l of ฮป { (H , u) โ
    _ , vs u
  }
  }

lookup-๐ : H โข x โฆ[ p - q ] o โจพ Hโฒ
         โ H โข x โฆ[ p - ๐ ] o โจพ H
lookup-๐ (vz[ ren-oโก ] p-qโกr) = vz[ ren-oโก ] p-๐โกp
lookup-๐ (vs[ ren-oโก ] l) = vs[ ren-oโก ] lookup-๐ l

~สฐโฒ-extend : {ฮโ : Con n} {ฮโ : Con m}
             {Hโ : Heap ฮโ} {Hโ : Heap ฮโ}
           โ {oโ : HeapObject ฮโ A}
           โ {ฯ : Ren ฮโ ฮโ}
           โ Hโ                   ~สฐ[ ฯ ] Hโ
           โ Hโ โ[ p ]โ renแต ฯ oโ ~สฐ[ liftRen ฯ ] Hโ โ[ p ]โ oโ
~สฐโฒ-extend ~ .classify vz = sharedโฆโ vz[ renแต-interchange _ _ ] p-๐โกp โฆโ vz[] p-๐โกp
~สฐโฒ-extend {ฯ = ฯ} ~ .classify (vs xโ) =
  case ~ .classify xโ of ฮป where
    (shared[ xโ ]โฆโ lโ โฆโ lโ) โ
      shared[ vs xโ
           โจพ renVar-lift-vs ฯ xโ
           โจพ sym (renแต-interchange ฯ _)
           ]โฆโ vs[] lโ
            โฆโ vs[] lโ
    (dead refl (o , l๐) โxโ) โ
      dead
        refl
        (ren1แต o , (vs[] l๐))
        (ฮป xโ [lift-ฯ]xโโกvs-xโ โ
          case renVar-unlift-vs _ xโ xโ [lift-ฯ]xโโกvs-xโ of ฮป { (xโโฒ , refl , ฯxโโฒโกxโ) โ
          โxโ xโโฒ ฯxโโฒโกxโ
          })

post-lookup-โข : {pโฒ : M}
              โ Distinct x y
              โ H  โข x โฆ[ pโฒ - q ] o โจพ Hโฒ
              โ H  โข y โฆ[ p ] oโฒ
              โ Hโฒ โข y โฆ[ p ] oโฒ
post-lookup-โข _   (vz[] _)   (vs[] l-y) = vs[] l-y
post-lookup-โข _   (vs[] l-x) (vz[] _)   = vz[] p-๐โกp
post-lookup-โข xโขy (vs[] l-x) (vs[] l-y) = vs[] post-lookup-โข xโขy l-x l-y

post-update : H  โข x โ xs โจพ Hโฒ
            โ Hโฒ โข x โฆ[ ๐ ] array xs
post-update vz = vz[] p-๐โกp
post-update (vs u) = vs[] post-update u

post-update-โข : Distinct x y
              โ H  โข x โ xs โจพ Hโฒ
              โ H  โข y โฆ[ p ] oโฒ
              โ Hโฒ โข y โฆ[ p ] oโฒ
post-update-โข _   vz       (vs[] l-y) = vs[] l-y
post-update-โข _   (vs l-x) (vz[] _)   = vz[] p-๐โกp
post-update-โข xโขy (vs l-x) (vs[] l-y) = vs[] post-update-โข xโขy l-x l-y

module _ โฆ ๐-well-behaved : Has-well-behaved-zero M semiring-with-meet โฆ where
  ~สฐ-post-lookup : {ฮโ : Con n} {ฮโ : Con m}
                  {ฯ : Ren ฮโ ฮโ}
                  {Hโ Hโโฒ : Heap ฮโ} {Hโ Hโโฒ : Heap ฮโ}
                  {xโ : ฮโ โแถ A}
                  {oโ : HeapObject ฮโ A}
                โ Hโ ~สฐ[ ฯ ] Hโ
                โ Hโ โข renVar ฯ xโ โฆ[ p - q ] renแต ฯ oโ โจพ Hโโฒ
                โ Hโ โข          xโ โฆ[ p - q ]        oโ โจพ Hโโฒ
                โ Hโโฒ ~สฐ[ ฯ ] Hโโฒ
  ~สฐ-post-lookup {ฯ = ฯ} {xโ = xโ} ~ lโ lโ .classify xโ =
    case dec-var (renVar ฯ xโ) xโ of ฮป where
      (yes (refl , refl)) โ case ~ .classify xโ of ฮป where
        (shared[ yโ โจพ ฯyโโกฯxโ โจพ refl ]โฆโ yโโฆ โฆโ ฯyโโฆ) โ
          case renVar-inj ฯ _ _ ฯyโโกฯxโ of ฮป { refl โ
          case โฆ[-]โ-โก lโ of ฮป { (_ , p-qโกr) โ
          sharedโฆโ post-lookup p-qโกr lโ โฆโ post-lookup p-qโกr lโ
          }
          }
        (dead refl (_ , l๐) โxโ) โ
          case lookup-det๐ l๐ lโ of ฮป { (refl , refl , refl , refl) โ
          dead refl (_ , post-lookup p-๐โกp lโ) โxโ
          }
      (no โข) โ case ~ .classify xโ of ฮป where
        (shared[ yโ โจพ refl โจพ refl ]โฆโ yโโฆ โฆโ ฯyโโฆ) โ
          sharedโฆโ post-lookup-โข (โขโDistinct (renVar ฯ xโ) (renVar ฯ yโ) โข) lโ yโโฆ
                โฆโ post-lookup-โข (โขโDistinct xโ yโ (ฮป where (refl , refl) โ โข (refl , refl))) lโ ฯyโโฆ
        (dead refl (_ , l๐) โxโ) โ dead refl (_ , post-lookup-โข (โขโDistinct (renVar ฯ xโ) xโ (ฮป where (refl , refl) โ โxโ xโ refl) ) lโ l๐) โxโ

  ~สฐ-lookup : {Hโ Hโโฒ : Heap ฮโ} {Hโ : Heap ฮโ}
              {ฯ : Ren ฮโ ฮโ}
              {xโ : ฮโ โแถ A}
            โ Hโ ~สฐ[ ฯ ] Hโ
            โ {oโ : HeapObject ฮโ A}
            โ (A โข Arr โ p โข ๐)
            โ Hโ โข renVar ฯ xโ โฆ[ p - q ] renแต ฯ oโ โจพ Hโโฒ
            โ โ ฮป Hโโฒ โ Hโ โข xโ โฆ[ p - q ] oโ โจพ Hโโฒ
                      ร Hโโฒ ~สฐ[ ฯ ] Hโโฒ
  ~สฐ-lookup {ฯ} {xโ} ~ AโขArrโpโข๐ l = case ~ .classify (renVar ฯ xโ) of ฮป where
    (shared[ xโโฒ โจพ ฯxโโก โจพ ฯoโโก ]โฆโ lโ โฆโ lโ) โ
      case renVar-inj ฯ _ xโ ฯxโโก of ฮป { refl โ
      case lookup-det (โฆ[-]โโฆ[] l) lโ of ฮป { (refl , refl , refl) โ
      case renแต-inj ฯ _ _ ฯoโโก of ฮป { refl โ
      case โฆ[]โโฆ[-] (โฆ[-]โ-โก l .projโ) lโ of ฮป { (Hโโฒ , lโโฒ) โ
      Hโโฒ , lโโฒ , ~สฐ-post-lookup ~ l lโโฒ
      }
      }
      }
      }
    (dead AโกArr (o , l๐) โxโ) โ
      case AโขArrโpโข๐ of ฮป where
        (injโ AโขArr) โ
          โฅ-elim (AโขArr AโกArr)
        (injโ pโข๐) โ
          let pโก๐ , _ = lookup-det (โฆ[-]โโฆ[] l) l๐
          in โฅ-elim (pโข๐ pโก๐)

  ~สฐ-lookupโฒ : {ฮโ : Con n} {ฮโ : Con m}
              {ฯ : Ren ฮโ ฮโ}
              {Hโ Hโโฒ : Heap ฮโ} {Hโ : Heap ฮโ}
              {xโ : ฮโ โแถ A}
              {oโ : HeapObject ฮโ A}
            โ Hโ ~สฐ[ ฯ ] Hโ
            โ Hโ โข xโ โฆ[ p - q ] oโ โจพ Hโโฒ
            โ q โข ๐
            โ โโ ฮป (Hโโฒ : Heap ฮโ)
                    (xโ : ฮโ โแถ A)
                    (oโ : HeapObject ฮโ A)
                  โ (Hโ โข xโ โฆ[ p - q ] oโ โจพ Hโโฒ)
                  ร xโ โก renVar ฯ xโ
                  ร oโ โก renแต ฯ oโ
                  ร Hโโฒ ~สฐ[ ฯ ] Hโโฒ
  ~สฐ-lookupโฒ {xโ = xโ} ~ l qโข๐ = case ~ .classify xโ of ฮป where
    (shared[ xโ โจพ refl โจพ refl ]โฆโ lโ โฆโ lโ) โ
      case lookup-det (โฆ[-]โโฆ[] l) lโ of ฮป { (refl , refl , refl) โ
      case โฆ[]โโฆ[-] (โฆ[-]โ-โก l .projโ) lโ of ฮป { (Hโโฒ , lโโฒ) โ
      Hโโฒ , xโ , _ , lโโฒ , refl , refl , ~สฐ-post-lookup ~ l lโโฒ
      }
      }
    (dead refl (_ , l๐) โxโ) โ
      let pโก๐ , _ = lookup-det (โฆ[-]โโฆ[] l) l๐
          r , p-qโกr = โฆ[-]โ-โก l
      in โฅ-elim (๐-qโขp qโข๐ (subst (_- _ โก r) pโก๐ p-qโกr))

  copy-on-writeโin-place : {Hโ Hโโฒ : Heap ฮโ} {Hโ : Heap ฮโ}
                        โ {x : ฮโ โแถ Arr}
                        โ โ {size} โ {xs : Vec Nat size}
                        โ Hโ ~สฐ[ ฯ ] Hโ
                        โ Hโ โข renVar ฯ x โฆ[ ๐ - ๐ ] array xs โจพ Hโโฒ
                        โ (i : Fin size) (v : Nat)
                        โ โ ฮป Hโโฒ โ Hโ โข x โ (xs [ i ]โ v) โจพ Hโโฒ
                                  ร Hโโฒ โ[ ๐ ]โ array (xs [ i ]โ v) ~สฐ[ remapRen x ฯ ] Hโโฒ
  copy-on-writeโin-place {ฯ} {x} ~ l i v =
    case lookupโwrite l i v of ฮป { (_ , u) โ
    case ~สฐ-lookup ~ (injโ non-trivial) (lookup-๐ l) of ฮป { (_ , lโฒ , _) โ
    case update-heap i v (โฆ[-]โโฆ[] lโฒ) of ฮป { (Hโโฒ , uโฒ) โ
    Hโโฒ , uโฒ , upToRen ฮป where
      vz โ
        shared[ x
            โจพ renVar-remap-vz ฯ x
            โจพ refl
            ]โฆโ vz[] p-๐โกp
              โฆโ post-update uโฒ
      (vs xโ) โ
        case dec-var xโ (renVar ฯ x) of ฮป where
          (no โข) โ case ~ .classify xโ of ฮป where
            (shared[ xโ โจพ ฯxโโกxโ โจพ ฯoโโกoโ ]โฆโ lโ โฆโ lโ) โ
              shared[ xโ
                  โจพ renVar-remap-vs ฯ xโ x xโ ฯxโโกxโ
                      (โขโDistinct xโ x ฮป where
                        (refl , refl) โ โข (refl , sym ฯxโโกxโ))
                  โจพ {! renแตโrenแต-remap ฯ x ฯoโโกoโ !}
                  ]โฆโ vs[]
                      post-lookup-โข
                        (โขโDistinct (renVar ฯ x) xโ ฮป where (refl , refl) โ โข (refl , refl))
                        l lโ
                    โฆโ
                      post-update-โข
                        (โขโDistinct x xโ ฮป where (refl , refl) โ โข (refl , sym ฯxโโกxโ))
                        uโฒ lโ
            (dead refl (o , xโโฆ[๐]) โxโ) โ
              dead
                refl
                ( ren1แต o
                , vs[]
                    post-lookup-โข
                      (โขโDistinct (renVar ฯ x) xโ ฮป where (refl , refl) โ โข (refl , refl))
                      l xโโฆ[๐]
                )
                (ฮป xโ [remap-x-ฯ]โกvs-xโ โ โxโ xโ (renVar-unremap-vs ฯ xโ x xโ [remap-x-ฯ]โกvs-xโ))
          (yes (refl , refl)) โ
            dead
              refl
              (array _ , vs[] post-lookup ๐-๐โก๐ l)
              (ฮป xโ [remap-x-ฯ]xโโกvs-ฯx โ
                ยฌDistinct-refl
                  (renVar ฯ x)
                  (renVar-unremap-โข ฯ xโ x (vs renVar ฯ x) [remap-x-ฯ]xโโกvs-ฯx))
    }
    }
    }

  ~S-ren1 : S ~S[ ฯ ] Sโฒ โ ren1หข A S ~S[ liftRen ฯ ] ren1หข A Sโฒ
  ~S-ren1 {ฯ} {Sโฒ} S~S = โกโ~S (trans (cong (ren1หข _) (~Sโโก S~S)) (ren1หข-interchange Sโฒ ฯ))

  private
    variable
      ฮโ ฮโ : Con _
      Hโ Hโ : Heap _
      Sโ Sโ : Stack _ _ _
      tโ tโ : _ โข _
      value-tโ value-tโ : Value _
      Eโ Eโ : Ren _ _

  ~แต-sym : ren ฯ t ~แต[ ฯ ] tโฒ
         โ ren ฯ tโฒ ~แต[ ฯ ] t
  ~แต-sym ~ = โกโ~แต (sym (~แตโโก ~))

  ~แต-subst-value : ren Eโ tโ ~แต[ ฯ ] ren Eโ tโ
                 โ Value tโ
                 โ Value tโ
  ~แต-subst-value {Eโ} {Eโ} ~ v = unrenValue Eโ (substValue ~ (renValue Eโ v))

  ~แต-subst-ยฌvalue : ren Eโ tโ ~แต[ ฯ ] ren Eโ tโ
                  โ ยฌ (Value tโ)
                  โ ยฌ (Value tโ)
  ~แต-subst-ยฌvalue {Eโ} {Eโ} ~ ยฌvalue-tโ value-tโ = ยฌvalue-tโ (substValue (~แต-sym ~) (renValue _ (renValue Eโ value-tโ)))

  ~สฐ-cons-value : {tโ : ฮโ โข A} {tโ : ฮโ โข A}
                โ Hโ ~สฐ[ ฯ ] Hโ
                โ (t~t : ren Eโ tโ ~แต[ ฯ ] ren Eโ tโ)
                โ (vโ : Value tโ)
                โ Sโ ~S[ ฯ ] Sโ
                โ (Hโ โ[ โฃ Sโ โฃ ยท p ]โ value (tโ , vโ) Eโ)
                    ~สฐ[ liftRen ฯ ]
                  (Hโ โ[ โฃ Sโ โฃ ยท p ]โ value (tโ , ~แต-subst-value t~t vโ) Eโ)
  ~สฐ-cons-value {Hโ} {ฯ} {Hโ} {Eโ} {Eโ} {Sโ} {p} {tโ} {tโ} ~สฐ ~แต vโ ~S =
    substโ
      (ฮป โฃSโฃ v โ Hโ โ[ โฃ Sโ โฃ ยท p ]โ v ~สฐ[ liftRen ฯ ] Hโ โ[ โฃSโฃ ยท p ]โ value (tโ , ~แต-subst-value ~แต vโ) Eโ)
      (~Sโโฃโกโฃ ~S)
      {!   !}
      (~สฐโฒ-extend ~สฐ)
